:PROPERTIES:
:ID:       00c3708d-74b9-459e-a21e-739ab47a13c3
:END:
#+title: Cracking Passwords
#+author: Joshua Chubb

* Begin
To start with we need to read a file that contains a number of words, so let's create one that we can play with. ~zweety~ is the string of our target hash, so we should make sure that we include that in our wordlist
#+BEGIN_SRC
  begin
  heaps
  zweety
#+END_SRC
We need to read the wordlist from drive so let's look that up. We find the open() function is built-in. We can add a line to our script:

#+BEGIN_SRC python
  wordlist = open("./words.txt")

  for word in wordlist:
      word = word.rstrip()
      print(word)
#+END_SRC
We see that this gives us our input wordlist as is, we next need to hash each of these entries. Python has hashlib which is suitable for our purposes. We can build on our program by including this. The md5 function is the one we will utilise. So let's import hashlib. We also want to have our words as byte strings instead of python strings, we can do this simply by opening our wordlist as a

#+begin_src python
  import hashlib

  wordlist = open("./words.txt", "rb")

  for word in wordlist:
      word = word.rstrip()
      hashed = hashlib.md5(word).hexdigest()

#+END_SRC

Finally we need to compare with our target string

#+begin_src python
  import hashlib

  target = "7f67005387f2c0db5c219d935fc425c0"
  wordlist = open("./words.txt")

  for word in wordlist:
      word = word.rstrip()
      hashed = hashlib.md5(word).hexdigest()

      if(hashed == target):

          print("Password Found: ", word)
#+END_SRC

This can then be utilised on a longer wordlist, such as rockyou, however it will take a longer time. We can generalise by asking for both the target hash and the wordlist via input.

* Adding command-line arguments
We now want to add some command-line arguments, to do this we need to import the sys package.
#+BEGIN_SRC python
  import sys

  # We can pull those arguments into a list
  Command_arguments = sys.argv
#+END_SRC

We will see that if we were to run ~python3 passcrack.py arg1 arg2 arg3~ will in our program have ~Command_arguments = [arg1, arg2, arg3]~ we could then call our script like so to input some intelligible things. Like so: ~python3 passcrack 7f67005387f2c0db5c219d935fc425c0 /usr/share/wordlists/rockyou.txt~ and then modify our initialising lines like so:
#+BEGIN_SRC python
  # python will treat the script name as the 0th element
  target = Command_arguments[1]
  wordlist = open(str(Command_arguments[1]))
#+END_SRC

** argparse
Simpler and maybe more usefully we can utilise argparse, this helps us in that we can utilise flags.

#+BEGIN_SRC python
  import argparse

  parse = argparse.ArgumentParser(description='Attempts to find the word, from the wordlist, whose hash matches the inputted hash.')
  parser.add_argument('hash')
  parser.add_argument ('-w', '--wordlist', dest='wordlist', default="./rockyou.txt")
  parser.add_argument ('-h', '--hashlist', dest='hashlist')
  parser.add_argument ('-e', '--encoding', dest='encode', default="md5")
#+END_SRC
